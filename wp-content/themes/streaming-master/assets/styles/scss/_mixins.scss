/*------------------------------------*\
#MIXINS
\*------------------------------------*/

/*------------------------------------*\
#FONTS
\*------------------------------------*/

@font-face {
  font-family: 'arialregular';
  src: url('../fonts/arial-webfont.woff2') format('woff2'),
       url('../fonts/arial-webfont.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

@mixin font1Regular {
font-family: 'arialregular';
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}

@font-face {
  font-family: 'arialbold';
  src: url('../fonts/arial_bold-webfont.woff2') format('woff2'),
       url('../fonts/arial_bold-webfont.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

@mixin font1Bold {
font-family: 'arialbold';
font-weight: 400;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}

@font-face {
  font-family: 'arialblackregular';
  src: url('../fonts/arial_black-webfont.woff2') format('woff2'),
       url('../fonts/arial_black-webfont.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

@mixin font1Black {
font-family: 'arialblackregular';
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}

/*------------------------------------*\
#COLORS
\*------------------------------------*/

$grey: #8a8a8d;
$darkGrey: #696969;
$lightGrey: #f1f1f1;
$red: #ea2127;
$orange: #faa85a;
$darkBlue: #064768;
$lightBlue: #48c3cf;

/*------------------------------------*\
#PX TO REM
\*------------------------------------*/
  
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  } 
  
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

/*------------------------------------*\
#BREAKPOINTS
\*------------------------------------*/

@mixin breakpoint($point) {

@if $point == desktop {
  @media (max-width: 1441px) { @content ; }
}

@if $point == desktopWide {
  @media (max-width: 1360px) { @content ; }
}
@if $point == desktopSmall {
@media (max-width: 1300px) { @content ; }
}
@if $point == map {
@media (max-width: 1200px) { @content ; }
}
@if $point == tablet {
  @media (max-width: 1039px) { @content ; }
}
@if $point == tabletSmall {
 @media (max-width: 800px) { @content ; }
}
@else if $point == phone {
  @media (max-width: 639px) { @content ; }
}
}

/*------------------------------------*\
#GLOBAL
\*------------------------------------*/

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

body {
    min-height: 100vh;
}

p,
a,
li,
label {
  @include font1Regular;
  font-size: rem(16px);
  color: #000;
}
p {
  margin-bottom: rem(20px);
  line-height: 18px;
}

a {
  text-decoration: none;
}
strong {
  font-weight: 700;
}
u{
  text-decoration: underline;
}

h1, .h1,
h2, .h2,
h3, .h3 {
  @include font1Black;
  color: $darkBlue;
  margin-bottom: rem(15px);
}
h4, .h4,
h5, .h5,
h6, .h6 {
  @include font1Bold;
}
h1, .h1 {
  font-size: rem(60px);
  line-height: 64px;
  @include breakpoint(tablet) {
    font-size: rem(46px);
    line-height: 50px;
  }
  @include breakpoint(tabletSmall) {
    font-size: rem(40px);
    line-height: 44px;
  }
  @include breakpoint(phone) {
    font-size: rem(26px);
    line-height: 30px;
  }
}
h2, .h2 {
  font-size: rem(40px);
  line-height: 44px;
  @include breakpoint(tablet) {
    font-size: rem(26px);
    line-height: 30px;
  }
  @include breakpoint(tabletSmall) {
    font-size: rem(30px);
    line-height: 34px;
  }
  @include breakpoint(phone) {
    font-size: rem(24px);
    line-height: 28px;
  }
}
body ,html {
  @include font1Regular;
  background-color: $lightGrey;
  height: 100%;
}

.transition-fade {
  transition: 0.4s;
  opacity: 1;
}
